import sqlite3
import datetime
import aiogram
import logging
import configparser

from aiogram import Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

datetime.datetime.now().min

db = sqlite3.connect('domashka.db', check_same_thread=False)
c = db.cursor()


config = configparser.ConfigParser()
config.read("settings.ini")

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

logs_group = int(config["Main"]["logs_group"]) #–ì—Ä—É–ø–ø–∞ –¥–ª—è –ª–æ–≥–æ–≤
bot = aiogram.Bot(str(config["Main"]["token"]), parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

#///////////////////////////////////////////////////

dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)

date = datetime.datetime.now()
print(str(date), "|" + " –î–æ–º–∞—à–∫–æ–ë–æ—Ç v. 1.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

# –∫–ª—é—á: –ø—Ä–µ–¥–º–µ—Ç –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ
predmets = {'alg': '–∞–ª–≥–µ–±—Ä–µ', 'en1': '–ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ', 'en2': '–≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ', 'bio': '–±–∏–æ–ª–æ–≥–∏–∏', 'geom': '–≥–µ–æ–º–µ—Ç—Ä–∏–∏', 'geog': '–≥–µ–æ–≥—Ä–∞—Ñ–∏–∏',
            'chem': '—Ö–∏–º–∏–∏', 'info1': '–ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏', 'info2': '–≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏', 'litra': '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ', 'nem1': '–ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ–º–µ—Ü–∫–æ–≥–æ',
            'nem2': '–≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ–º–µ—Ü–∫–æ–≥–æ', 'obchest': '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', 'history': '–∏—Å—Ç–æ—Ä–∏–∏', 'russian': '—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É', 'techn1': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏(–º–∞–ª—å—á–∏–∫–∏)',
            'techn2': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏(–¥–µ–≤–æ—á–∫–∏)', 'phisic': '—Ñ–∏–∑–∏–∫–µ'}


@dp.message_handler(commands=['start'])
async def start(message):
    user_id = message.from_user.id
    c.execute(f"SELECT id FROM users WHERE id = {user_id}")
    data = c.fetchone()[0]

    if data is None:
        dostup = 0
        name = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        surname = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        user_info = (int(user_id), str(name), str(surname), int(dostup))
        c.execute("INSERT INTO users(id, name, surname, dostup) VALUES(?, ?, ?, ?)",(user_info))
        db.commit()
        await message.reply("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ! –í–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º - *" + str(user_id) + '*', parse_mode= "Markdown")

    else:
        await message.reply("üîë –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")


@dp.message_handler(commands=['dz'])
async def check_dz(message):
    user_id = message.from_user.id
    c.execute(f"SELECT dostup FROM users WHERE id = {user_id}")
    data = c.fetchone()

    if int(data[0]) < 1 or data[0] is None:
        await message.reply("üò¢ –£ –≤–∞—Å –º–µ–Ω—å—à–µ 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    else:
        kb = types.InlineKeyboardMarkup()
        kb_algebra = types.InlineKeyboardButton(text='–ê–ª–≥–µ–±—Ä–∞', callback_data='check_algebra')
        kb_english = types.InlineKeyboardButton(text='–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', callback_data='check_english')
        kb_biology = types.InlineKeyboardButton(text='–ë–∏–æ–ª–æ–≥–∏—è', callback_data='check_biology')
        kb_geogr = types.InlineKeyboardButton(text='–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', callback_data='check_geogr')
        kb_geoma = types.InlineKeyboardButton(text='–ì–µ–æ–º–µ—Ç—Ä–∏—è', callback_data='check_geoma')
        kb_chimiya = types.InlineKeyboardButton(text='–•–∏–º–∏—è', callback_data='check_chimiya')
        kb_informat = types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', callback_data='check_informat')
        kb_litra = types.InlineKeyboardButton(text='–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data='check_litra')
        kb_nemec = types.InlineKeyboardButton(text='–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫', callback_data='check_nemec')
        kb_obshestvo = types.InlineKeyboardButton(text='–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', callback_data='check_obshestvo')
        kb_history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è', callback_data='check_history')
        kb_russian = types.InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', callback_data='check_russian')
        kb_techno = types.InlineKeyboardButton(text='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', callback_data='check_techno')
        kb_phisic = types.InlineKeyboardButton(text='–§–∏–∑–∏–∫–∞', callback_data='check_phisic')

        kb.add(kb_algebra, kb_english, kb_biology, kb_geogr, kb_geoma, kb_chimiya, kb_informat, kb_litra, kb_nemec, kb_obshestvo, kb_history, kb_russian, kb_techno, kb_phisic)
        return await message.reply('üõç –í—ã–±–µ—Ä–∏—Ç–µ *—à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç* –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', parse_mode= "Markdown", reply_markup=kb)



async def check_dz(call: types.CallbackQuery, name, db_name): # –æ–±—ä–µ–∫—Ç CallbackQuery, –∏–º—è –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –∑–∞–ø–∏—Å—å –≤ –ë–î
    c.execute(f"SELECT dz, author, time FROM domashka WHERE predmet = '{db_name}'")
    data = c.fetchone()

    if data[0] is not None:
        return await bot.answer_callback_query(call.id, f'\t\tüìî –î–æ—Å–∫–∞ –¥/–∑ –ø–æ {name}\n\nüòá –ê–≤—Ç–æ—Ä: @{data[1]}\nüïì –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {data[2]}\n\nüìö –ó–∞–¥–∞–Ω–∏–µ:\n{data[0]}', show_alert=True)
            
    else:
        return await bot.answer_callback_query(call.id, f"üìî –î–æ–º–∞—à–∫–∞ –ø–æ {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!", show_alert=True)
        

@dp.callback_query_handler()
async def callback_check_dz(call: types.CallbackQuery):
    if call.from_user.id != call.message.reply_to_message.from_user.id:
        return await bot.answer_callback_query(call.id, f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!") 

    if call.data.startswith('check'):
        if call.data == 'check_algebra':
            return await check_dz(call, '–∞–ª–≥–µ–±—Ä–µ', 'alg')

        elif call.data == 'check_enboys':
            return await check_dz(call, '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É(–ò–≤–∞–Ω–æ–≤–∞)', 'en1')
            
        elif call.data == 'check_engirls':
            return await check_dz(call, '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É(–•—É—Å–Ω—É–ª–ª–∏–Ω–∞)', 'en2')
        
        elif call.data == 'check_biology':
            return await check_dz(call, '–±–∏–æ–ª–æ–≥–∏–∏', 'bio')

        elif call.data == 'check_geogr':
            return await check_dz(call, '–≥–µ–æ–≥—Ä–∞—Ñ–∏–∏', 'geog')
        
        elif call.data == 'check_geoma':
            return await check_dz(call, '–≥–µ–æ–º–µ—Ç—Ä–∏–∏', 'geom')
        
        elif call.data == 'check_chimiya':
            return await check_dz(call, '—Ö–∏–º–∏–∏', 'chem')

        elif call.data == 'check_iboys':
            return await check_dz(call, '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ(–°–∞–Ω–Ω–∏–∫–æ–≤)', 'info1')
            
        elif call.data == 'check_igirls':
            return await check_dz(call, '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ(–ê–Ω–¥—Ä–µ–µ–≤–∞)', 'info2')
        
        elif call.data == 'check_litra':
            return await check_dz(call, '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ', 'litra')

        elif call.data == 'check_nboys':
            return await check_dz(call, '–Ω–µ–º–µ—Ü–∫–æ–º—É —è–∑—ã–∫—É(–ò–ª—å–∏–Ω–∞)', 'nem1')
            
        elif call.data == 'check_ngirls':
            return await check_dz(call, '–Ω–µ–º–µ—Ü–∫–æ–º—É —è–∑—ã–∫—É(–†–∞–∑–∏–Ω–∞)', 'nem2')

        elif call.data == 'check_obshestvo':
            return await check_dz(call, '–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—é', 'obchest')
        
        elif call.data == 'check_history':
            return await check_dz(call, '–∏—Å—Ç–æ—Ä–∏–∏', 'history')
        
        elif call.data == 'check_russian':
            return await check_dz(call, '—Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É', 'russian')

        elif call.data == 'check_tboys':
            return await check_dz(call, '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏(–ú–∞–ª—å—á–∏–∫–∏)', 'techn1')
            
        elif call.data == 'check_tgirls':
            return await check_dz(call, '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏(–î–µ–≤–æ—á–∫–∏)', 'techn2')

        elif call.data == 'check_phisic':
            return await check_dz(call, '—Ñ–∏–∑–∏–∫–µ', 'phisic')

        
        elif call.data == 'check_techno':
            kb = types.InlineKeyboardMarkup()
            kb_tboys = types.InlineKeyboardButton(text='–ú–∞–ª—å—á–∏–∫–∏', callback_data='check_tboys')
            kb_tgirls = types.InlineKeyboardButton(text='–î–µ–≤–æ—á–∫–∏', callback_data='check_tgirls')
            kb_return = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return')
            kb.add(kb_tboys, kb_tgirls, kb_return)
            return await call.message.edit_reply_markup(reply_markup=kb)

        elif call.data == 'check_nemec':
            kb = types.InlineKeyboardMarkup()
            kb_nboys = types.InlineKeyboardButton(text='–ú–æ–ª–æ–¥–∞—è (–ò–ª—å–∏–Ω–∞)', callback_data='check_nboys')
            kb_ngirls = types.InlineKeyboardButton(text='–°—Ç–∞—Ä–∞—è (–†–∞–∑–∏–Ω–∞)', callback_data='check_ngirls')
            kb_return = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return')
            kb.add(kb_nboys, kb_ngirls, kb_return)
            return await call.message.edit_reply_markup(reply_markup=kb)

        elif call.data == 'check_informat':
            kb = types.InlineKeyboardMarkup()
            kb_iboys = types.InlineKeyboardButton(text='–°–∞–Ω–Ω–∏–∫–æ–≤', callback_data='check_iboys')
            kb_igirls = types.InlineKeyboardButton(text='–ê–Ω–¥—Ä–µ–µ–≤–∞', callback_data='check_igirls')
            kb_return = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return')
            kb.add(kb_iboys, kb_igirls, kb_return)
            return await call.message.edit_reply_markup(reply_markup=kb)

        elif call.data == 'check_english':
            kb = types.InlineKeyboardMarkup()
            kb_enboys = types.InlineKeyboardButton(text='–ò–≤–∞–Ω–æ–≤–∞', callback_data='check_enboys')
            kb_engirls = types.InlineKeyboardButton(text='–•—É—Å–Ω—É–ª–ª–∏–Ω–∞', callback_data='check_engirls')
            kb_return = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='return')
            kb.add(kb_enboys, kb_engirls, kb_return)
            return await call.message.edit_reply_markup(reply_markup=kb)

    
    elif call.data == 'return':
        kb = types.InlineKeyboardMarkup()
        kb_algebra = types.InlineKeyboardButton(text='–ê–ª–≥–µ–±—Ä–∞', callback_data='check_algebra')
        kb_english = types.InlineKeyboardButton(text='–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', callback_data='check_english')
        kb_biology = types.InlineKeyboardButton(text='–ë–∏–æ–ª–æ–≥–∏—è', callback_data='check_biology')
        kb_geogr = types.InlineKeyboardButton(text='–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', callback_data='check_geogr')
        kb_geoma = types.InlineKeyboardButton(text='–ì–µ–æ–º–µ—Ç—Ä–∏—è', callback_data='check_geoma')
        kb_chimiya = types.InlineKeyboardButton(text='–•–∏–º–∏—è', callback_data='check_chimiya')
        kb_informat = types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', callback_data='check_informat')
        kb_litra = types.InlineKeyboardButton(text='–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', callback_data='check_litra')
        kb_nemec = types.InlineKeyboardButton(text='–ù–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫', callback_data='check_nemec')
        kb_obshestvo = types.InlineKeyboardButton(text='–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', callback_data='check_obshestvo')
        kb_history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è', callback_data='check_history')
        kb_russian = types.InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', callback_data='check_russian')
        kb_techno = types.InlineKeyboardButton(text='–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è', callback_data='check_techno')
        kb_phisic = types.InlineKeyboardButton(text='–§–∏–∑–∏–∫–∞', callback_data='check_phisic')

        kb.add(kb_algebra, kb_english, kb_biology, kb_geogr, kb_geoma, kb_chimiya, kb_informat, kb_litra, kb_nemec, kb_obshestvo, kb_history, kb_russian, kb_techno, kb_phisic)
        return await call.message.edit_reply_markup(reply_markup=kb)


@dp.message_handler(commands=['dz_new'])
async def new_dz(message: types.Message):
    if message.chat.type != 'private':
        return await message.reply("‚ùå –≠—Ç–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞!")

    user_id = message.from_user.id
    c.execute(f"SELECT dostup FROM users WHERE id = {user_id}")
    data = c.fetchone()

    if int(data[0]) < 2 or data[0] is None:
        return await message.reply("–£ –≤–∞—Å –º–µ–Ω—å—à–µ 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = message.get_args().split(' ', maxsplit=1)

    if len(info) <= 1:
        return await message.reply("<b>üíª –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n/dz_new *–ø—Ä–µ–¥–º–µ—Ç* *–¥–æ–º–∞—à–∫–∞*\n\n–ü—Ä–∏–º–µ—Ä:\n/dz_new en1 1. –£—á–µ–±–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 51 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å—Ç–Ω–æ, —Ä–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å —Å—Ç—Ä 31 –ø–æ–ª–Ω–æ—Å—Ç—å—é\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\
            - alg - –∞–ª–≥–±–µ—Ä–∞\n\
            - en1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - en2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - bio - –±–∏–æ–ª–æ–≥–∏—è\n\
            - geom - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - geog - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - chem - —Ö–∏–º–∏—è\n\
            - info1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - info2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - litra - –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n\
            - nem1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - nem2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - obchest - –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ\n\
            - history - –∏—Å—Ç–æ—Ä–∏—è\n\
            - russian - —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n\
            - techn1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - techn2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - phisic - —Ñ–∏–∑–∏–∫–∞</b>")

    if info[0] not in predmets:
        return await message.reply("<b>‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\
            - alg - –∞–ª–≥–±–µ—Ä–∞\n\
            - en1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - en2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - bio - –±–∏–æ–ª–æ–≥–∏—è\n\
            - geom - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - geog - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - chem - —Ö–∏–º–∏—è\n\
            - info1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - info2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - litra - –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n\
            - nem1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - nem2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - obchest - –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ\n\
            - history - –∏—Å—Ç–æ—Ä–∏—è\n\
            - russian - —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n\
            - techn1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - techn2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - phisic - —Ñ–∏–∑–∏–∫–∞</b>")


    c.execute(f"INSERT INTO logs(user_id, action, result) VALUES({user_id}, '–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥/–∑ –ø–æ {info[0]}', '{info[1]}')")
    db.commit()
    c.execute(f"UPDATE domashka SET dz = '{info[1]}', author = '{message.from_user.username}', time = '{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}' WHERE predmet = '{info[0]}'")
    db.commit()
    await bot.send_message(logs_group, f"ü§® –ó–∞–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b>\n–î–µ–π—Å—Ç–≤–∏–µ: <b>–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥/–∑ –ø–æ {info[0]}</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{info[1]}</b>")
    return await message.reply(f"‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ <b>{predmets[info[0]]}</b> –Ω–∞:\n\n<b>{info[1]}</b>")

@dp.message_handler(commands=['dz_help'])
async def help_cmd(message: types.Message):
    user_id = message.from_user.id
    c.execute(f"SELECT dostup FROM users WHERE id = {user_id}")
    data = c.fetchone()

    if int(data[0]) < 1 or data[0] is None:
        return await message.reply("–£ –≤–∞—Å –º–µ–Ω—å—à–µ 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    return await message.reply("üòç–ö–æ–º–∞–Ω–¥—ã –î–æ–º–∞—à–∫–æ–ë–æ—Ç–∞:\n\n<b>/dz</b> - —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(1+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_help</b> - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏(1+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_new *–∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞* *–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*</b> - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(2+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_clear *–∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞*</b> - –æ—á–∏—Å—Ç–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(2+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)")


@dp.message_handler(commands=['dz_clear'])
async def clear_cmd(message: types.Message):
    user_id = message.from_user.id
    c.execute(f"SELECT dostup FROM users WHERE id = {user_id}")
    data = c.fetchone()

    if int(data[0]) < 2 or data[0] is None:
        return await message.reply("–£ –≤–∞—Å –º–µ–Ω—å—à–µ 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = message.get_args()

    if len(info) <= 2:
        return await message.reply("<b>üíª –î–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n/dz_clear *–ø—Ä–µ–¥–º–µ—Ç*\n\n–ü—Ä–∏–º–µ—Ä:\n/dz_clear en1\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\
            - alg - –∞–ª–≥–±–µ—Ä–∞\n\
            - en1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - en2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - bio - –±–∏–æ–ª–æ–≥–∏—è\n\
            - geom - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - geog - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - chem - —Ö–∏–º–∏—è\n\
            - info1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - info2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - litra - –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n\
            - nem1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - nem2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - obchest - –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ\n\
            - history - –∏—Å—Ç–æ—Ä–∏—è\n\
            - russian - —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n\
            - techn1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - techn2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - phisic - —Ñ–∏–∑–∏–∫–∞</b>")

    if info not in predmets:
        return await message.reply("<b>‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n\
            - alg - –∞–ª–≥–±–µ—Ä–∞\n\
            - en1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - en2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ\n\
            - bio - –±–∏–æ–ª–æ–≥–∏—è\n\
            - geom - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - geog - –≥–µ–æ–º–µ—Ç—Ä–∏—è\n\
            - chem - —Ö–∏–º–∏—è\n\
            - info1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - info2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏\n\
            - litra - –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞\n\
            - nem1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - nem2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ\n\
            - obchest - –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ\n\
            - history - –∏—Å—Ç–æ—Ä–∏—è\n\
            - russian - —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫\n\
            - techn1 - –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - techn2 - –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\
            - phisic - —Ñ–∏–∑–∏–∫–∞</b>")


    c.execute(f"UPDATE domashka SET dz = null, author = null, time = null WHERE predmet = '{info}'")
    db.commit()
    c.execute(f"INSERT INTO logs(user_id, action, result) VALUES({user_id}, '–æ–±–Ω—É–ª–µ–Ω–∏–µ {info}', '—É—Å–ø–µ—à–Ω–æ')")
    db.commit()
    await bot.send_message(logs_group, f"ü§® –ó–∞–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b>\n–î–µ–π—Å—Ç–≤–∏–µ: <b>–æ–±–Ω—É–ª–µ–Ω–∏–µ {info}</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>—É—Å–ø–µ—à–Ω–æ</b>")
    return await message.reply(f"‚òëÔ∏è –í—ã –æ–±–Ω—É–ª–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ <b>{predmets[info]}</b>")


@dp.message_handler(commands=['dz_setadmin'])
async def clear_cmd(message: types.Message):
    user_id = message.from_user.id
    c.execute(f"SELECT dostup FROM users WHERE id = {user_id}")
    data = c.fetchone()

    if int(data[0]) < 3 or data[0] is None:
        return await message.reply("‚ùóÔ∏è –£ –≤–∞—Å –º–µ–Ω—å—à–µ 3 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = message.get_args().split(maxsplit=1)

    if len(info) < 2:
        return await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/dz_setadmin id lvl</b>\n–ü—Ä–∏–º–µ—Ä: <b>/dz_setadmin 1231231234 2</b>")

    c.execute(f"SELECT id FROM users WHERE id = {info[0]}")
    data = c.fetchone()

    if data is None:
        return await message.reply("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞!")

    try:
        if int(info[1]) > -1 and int(info[1]) <= 3:
            c.execute(f"UPDATE users SET dostup = {info[1]} WHERE id = '{info[0]}'")
            db.commit()
            return await message.reply(f"‚ùóÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <b>{info[0]}</b> –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è <b>{info[1]}</b>!")

        else:
            return await message.reply("‚ùóÔ∏è –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 0, –Ω–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 3!")
    
    except ValueError:
        return await message.reply("‚ùóÔ∏è –í –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã!")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)