import sqlite3, logging

from asyncio import run
from datetime import datetime

from aiogram import Dispatcher, types, Bot, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.utils.markdown import hlink

from database import Database
from configs.config import token, logs_group, anti_group_dz
from configs.lessons_config import lessons
from utils.utils import get_text_list_lessons_with_code

#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = Bot(token, parse_mode='HTML')
dp = Dispatcher(disable_fsm=True)
router = Router()
logging.basicConfig(level=logging.INFO)
db = Database('domashka.db')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏
@router.callback_query(F.data.startswith('check_'))
async def callback_check_dz(call: types.CallbackQuery):
    dostup = await db.get_user_dostup(call.from_user.id)
    if dostup is None or dostup < 1: return await call.answer("üò¢ –£ –≤–∞—Å –Ω–µ—Ç 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    lesson_code = call.data.split('_', maxsplit=1)[1]    
    data = await db.get_dz(lesson_code)

    if data is None or data[0] is None: return await call.answer(f"üìî –î–æ–º–∞—à–∫–∞ –ø–æ {lessons[lesson_code][1]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!", show_alert=True)    
    await call.message.answer(f'üìî –î–æ—Å–∫–∞ –¥/–∑ –ø–æ {lessons[lesson_code][1]}\nüïì –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {data[2]} ({hlink("–∞–≤—Ç–æ—Ä", data[1])})\n\nüìö –ó–∞–¥–∞–Ω–∏–µ:\n{data[0]}', parse_mode='HTML')
    return call.answer()

#///////////////////////////////////////////////////

@dp.message(Command('start'))
async def start(message: types.Message):
    registration = await db.add_user((message.from_user.id, message.from_user.first_name, message.from_user.last_name))
    
    if registration == 'Error': return print('–û–®–ò–ë–ö–ê –í –ó–ê–ü–†–û–°–ï!!!!')
    if not registration: return await message.reply(f"üîë –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}")
    return await message.reply(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ! –í–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º - <b>{message.from_user.id}</b>")


@dp.message(Command('dz'))
async def check_dz(message: types.Message):
    dostup = await db.get_user_dostup(message.from_user.id)
    if dostup is None or dostup < 1: return await message.reply("üò¢ –£ –≤–∞—Å –Ω–µ—Ç 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")
    if message.chat.id < 0 and anti_group_dz: return await message.reply("üò¢ –í —Ü–µ–ª—è—Ö –∞–Ω—Ç–∏-—Ñ–ª—É–¥–∞ –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É <b>–ù–ï–õ–¨–ó–Ø</b> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º")
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard = [[types.InlineKeyboardButton(text=lessons[i][0], callback_data=f'check_{i}')] for i in lessons])
    return await message.reply('üõç –í—ã–±–µ—Ä–∏—Ç–µ *—à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç* –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', parse_mode= "Markdown", reply_markup=keyboard)


@dp.message(Command('dz_new'))
async def new_dz(message: types.Message, command: CommandObject):
    dostup = await db.get_user_dostup(message.from_user.id)
    if dostup is None or dostup < 2: return await message.reply("üò¢ –£ –≤–∞—Å –Ω–µ—Ç 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    if command.args is None: return await message.reply(f"üíª –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n<b>/dz_new *–ø—Ä–µ–¥–º–µ—Ç* *–¥–æ–º–∞—à–∫–∞*</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>/dz_new en1 1. –£—á–µ–±–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 51 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å—Ç–Ω–æ, —Ä–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å —Å—Ç—Ä 31 –ø–æ–ª–Ω–æ—Å—Ç—å—é</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")
    info = command.args.split(' ', maxsplit=1)
    if len(info) < 2: return await message.reply(f"üíª –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n<b>/dz_new *–ø—Ä–µ–¥–º–µ—Ç* *–¥–æ–º–∞—à–∫–∞*</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>/dz_new en1 1. –£—á–µ–±–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 51 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å—Ç–Ω–æ, —Ä–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å —Å—Ç—Ä 31 –ø–æ–ª–Ω–æ—Å—Ç—å—é</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")
    if info[0] not in lessons: return await message.reply(f"‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{get_text_list_lessons_with_code()}")
    
    await db.add_new_dz(message.from_user.id, message.from_user.url, info[0], info[1])
    await message.reply(f"‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ <b>{lessons[info[0]][1]}</b> –Ω–∞:\n\n<b>{info[1]}</b>")
    return await bot.send_message(logs_group, f"ü§® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hlink(message.from_user.first_name, message.from_user.url)}\n–î–µ–π—Å—Ç–≤–∏–µ: <b>–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ –ø–æ {lessons[info[0]][1]}</b>\n–ù–æ–≤–∞—è –¥–æ–º–∞—à–∫–∞: <b>{info[1]}</b>")


@dp.message(Command('help'))
async def help_cmd(message: types.Message):
    dostup = await db.get_user_dostup(message.from_user.id)
    if dostup is None or dostup < 1: return await message.reply("üò¢ –£ –≤–∞—Å –Ω–µ—Ç 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")
    return await message.reply("üòç–ö–æ–º–∞–Ω–¥—ã –î–æ–º–∞—à–∫–æ–ë–æ—Ç–∞:\n\n<b>/dz</b> - —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (1+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_help</b> - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏ (1+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_new *–∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞* *–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*</b> - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (2+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_clear *–∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞*</b> - –æ—á–∏—Å—Ç–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (2+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n/dz_setadmin *id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* *—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞*")


@dp.message(Command('dz_clear'))
async def clear_cmd(message: types.Message, command: CommandObject):
    dostup = await db.get_user_dostup(message.from_user.id)
    if dostup is None or dostup < 2: return await message.reply("üò¢ –£ –≤–∞—Å –Ω–µ—Ç 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = command.args
    if info is None: return await message.reply(f"üíª –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n<b>/dz_clear –ø—Ä–µ–¥–º–µ—Ç</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>/dz_clear en1</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")
    if info not in lessons: return await message.reply(f"‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")

    await db.clear_dz(message.from_user.id, info)
    await message.reply(f"‚òëÔ∏è –í—ã –æ—á–∏—Å—Ç–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ <b>{lessons[info][1]}</b>")
    return await bot.send_message(logs_group, f"ü§® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hlink(message.from_user.first_name, message.from_user.url)}\n–î–µ–π—Å—Ç–≤–∏–µ: <b>–æ–±–Ω—É–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏ –ø–æ {lessons[info][1]}</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>—É—Å–ø–µ—à–Ω–æ</b>")


@dp.message(Command('dz_setadmin'))
async def clear_cmd(message: types.Message, command: CommandObject):
    dostup = await db.get_user_dostup(message.from_user.id)
    if dostup is None or dostup < 3: return await message.reply("üò¢ –£ –≤–∞—Å –Ω–µ—Ç 3 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    if command.args is None: return await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/dz_setadmin id lvl</b>\n–ü—Ä–∏–º–µ—Ä: <b>/dz_setadmin 1231231234 2</b>")
    info = command.args.split(maxsplit=1)
    if len(info) < 2: return await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/dz_setadmin id lvl</b>\n–ü—Ä–∏–º–µ—Ä: <b>/dz_setadmin 1231231234 2</b>")

    if await db.get_user_dostup(message.from_user.id) is None: return await message.reply("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞!")

    try: 
        if int(info[1]) < 0 and int(info[1]) > 3: return await message.reply("‚ùóÔ∏è –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 0, –Ω–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 3!")
    except ValueError:
        return await message.reply("‚ùóÔ∏è –í –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã!")
        
    await db.set_user_dostup(message.from_user.id, int(info[1]))
    await message.reply(f"üòÅ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <b>{info[0]}</b> –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è <b>{info[1]}</b>!")
    return await bot.send_message(int(info[0]), f"üòÅ –í–∞–º —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è <b>{info[1]}</b>!")


# –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫
async def main():
    await db.check_db()
    dp.include_router(router)
    print(f"{datetime.now()} | –î–æ–º–∞—à–∫–æ–ë–æ—Ç v. 3.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    return await dp.start_polling(bot)


if __name__ == '__main__':
    run(main())
