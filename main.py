import sqlite3
import datetime
import aiogram
import logging
from aiogram import Dispatcher, executor, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from configs.config import *
from configs.lessons_config import *
from utils.utils import *


db = sqlite3.connect('domashka.db', check_same_thread=False)
c = db.cursor()
#–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = aiogram.Bot(token, parse_mode='HTML') #—Ç–æ–∫–µ–Ω
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)
print(f" {datetime.datetime.now()} | –î–æ–º–∞—à–∫–æ–ë–æ—Ç v. 1.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

async def get_dz(call: types.CallbackQuery, name, db_name): # –æ–±—ä–µ–∫—Ç CallbackQuery, –∏–º—è –≤ –¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –∑–∞–ø–∏—Å—å –≤ –ë–î
    data = c.execute(f"SELECT dz, author, time FROM domashka WHERE predmet = '{db_name}'").fetchone()
    if data is not None:
        if data[0] is None:
            return await bot.answer_callback_query(call.id, f"üìî –î–æ–º–∞—à–∫–∞ –ø–æ {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!", show_alert=True)
        return await bot.answer_callback_query(call.id, f'\t\tüìî –î–æ—Å–∫–∞ –¥/–∑ –ø–æ {name}\n\nüòá –ê–≤—Ç–æ—Ä: @{data[1]}\nüïì –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {data[2]}\n\nüìö –ó–∞–¥–∞–Ω–∏–µ:\n{data[0]}', show_alert=True)
    else:
        return await bot.answer_callback_query(call.id, f"üìî –î–æ–º–∞—à–∫–∞ –ø–æ {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!", show_alert=True)

#///////////////////////////////////////////////////

@dp.message_handler(commands=['start'])
async def start(message):
    data = c.execute(f"SELECT id FROM users WHERE id = {message.from_user.id}").fetchone()
    if data is None:
        c.execute("INSERT INTO users(id, name, surname, dostup) VALUES(?, ?, ?, ?)", (message.from_user.id, message.from_user.first_name, message.from_user.last_name, 0))
        db.commit()
        return await message.reply(f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –±–æ—Ç–µ! –í–∞—à ID —Ç–µ–ª–µ–≥—Ä–∞–º - <b>{message.from_user.id}</b>")
    else:
        return await message.reply("üîë –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")


@dp.message_handler(commands=['dz'])
async def check_dz(message):
    data = c.execute(f"SELECT dostup FROM users WHERE id = {message.from_user.id}").fetchone()
    if data is None or int(data[0]) < 1:
        return await message.reply("üò¢ –£ –≤–∞—Å –º–µ–Ω—å—à–µ 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")
    
    kb = types.InlineKeyboardMarkup()
    for i in lessons:
        kb.add(types.InlineKeyboardButton(text=lessons[i], callback_data=f'check_{i}'))
    
    return await message.reply('üõç –í—ã–±–µ—Ä–∏—Ç–µ *—à–∫–æ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç* –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', parse_mode= "Markdown", reply_markup=kb)
        

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏
@dp.callback_query_handler()
async def callback_check_dz(call: types.CallbackQuery):
    if call.from_user.id != call.message.reply_to_message.from_user.id:
        return await bot.answer_callback_query(call.id, f"‚ùóÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è!") 

    if call.data.startswith('check_'):
        lesson_id = call.data.split('check_', maxsplit=1)
        return await get_dz(call, lessons_dat[lesson_id[1]], lesson_id[1])

    #elif call.data == 'return':
    #    kb = types.InlineKeyboardMarkup()
    #    for i in lessons:
    #        kb.add(types.InlineKeyboardButton(text=lessons[i], callback_data=f'check_{i}'))
    #    return await call.message.edit_reply_markup(reply_markup=kb)


@dp.message_handler(commands=['dz_new'])
async def new_dz(message: types.Message):
    user_id = message.from_user.id
    admin_lvl = c.execute(f"SELECT dostup FROM users WHERE id = {user_id}").fetchone()
    if admin_lvl is None or int(admin_lvl[0]) < 2:
        return await message.reply("–£ –≤–∞—Å –º–µ–Ω—å—à–µ 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = message.get_args().split(' ', maxsplit=1)
    if len(info) <= 1:
        return await message.reply(f"üíª –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n<b>/dz_new *–ø—Ä–µ–¥–º–µ—Ç* *–¥–æ–º–∞—à–∫–∞*</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>/dz_new en1 1. –£—á–µ–±–Ω–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 51 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É—Å—Ç–Ω–æ, —Ä–∞–±–æ—á–∞—è —Ç–µ—Ç—Ä–∞–¥—å —Å—Ç—Ä 31 –ø–æ–ª–Ω–æ—Å—Ç—å—é</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")
    if info[0] not in lessons:
        return await message.reply(f"‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{get_text_list_lessons_with_code()}")

    c.execute(f"INSERT INTO logs(user_id, action, result) VALUES({user_id}, '–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥/–∑ –ø–æ {info[0]}', '{info[1]}')")
    db.commit()
    c.execute(f"UPDATE domashka SET dz = '{info[1]}', author = '{message.from_user.username}', time = '{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')}' WHERE predmet = '{info[0]}'")
    db.commit()
    await bot.send_message(logs_group, f"ü§® –ó–∞–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_id}</b>\n–î–µ–π—Å—Ç–≤–∏–µ: <b>–∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥/–∑ –ø–æ {info[0]}</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{info[1]}</b>")
    return await message.reply(f"‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ <b>{lessons_dat[info[0]]}</b> –Ω–∞:\n\n<b>{info[1]}</b>")


@dp.message_handler(commands=['dz_help'])
async def help_cmd(message: types.Message):
    admin_lvl = c.execute(f"SELECT dostup FROM users WHERE id = {message.from_user.id}").fetchone()
    if admin_lvl is None or int(admin_lvl[0]) < 1:
        return await message.reply("‚ùóÔ∏è –£ –≤–∞—Å –º–µ–Ω—å—à–µ 1 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")
    
    return await message.reply("üòç–ö–æ–º–∞–Ω–¥—ã –î–æ–º–∞—à–∫–æ–ë–æ—Ç–∞:\n\n<b>/dz</b> - —É–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(1+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_help</b> - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø–æ–º–æ—â–∏(1+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_new *–∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞* *–¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*</b> - –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(2+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n<b>/dz_clear *–∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞*</b> - –æ—á–∏—Å—Ç–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ(2+ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞)\n/dz_setadmin *id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* *—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞*")


@dp.message_handler(commands=['dz_clear'])
async def clear_cmd(message: types.Message):
    admin_lvl = c.execute(f"SELECT dostup FROM users WHERE id = {message.from_user.id}").fetchone()
    if admin_lvl is None or int(admin_lvl[0]) < 2:
        return await message.reply("‚ùóÔ∏è –£ –≤–∞—Å –º–µ–Ω—å—à–µ 2 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = message.get_args()
    if len(info) <= 2:
        return await message.reply(f"üíª –î–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –¥–æ–º–∞—à–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–Ω—Ç–∞–∫–∏—Å–∏—Å:\n<b>/dz_clear –ø—Ä–µ–¥–º–µ—Ç</b>\n\n–ü—Ä–∏–º–µ—Ä:\n<b>/dz_clear en1</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")
    if info not in lessons:
        return await message.reply(f"‚ùóÔ∏è –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞!\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n<b>{get_text_list_lessons_with_code()}</b>")

    c.execute(f"UPDATE domashka SET dz = null, author = null, time = null WHERE predmet = '{info}'")
    db.commit()
    c.execute(f"INSERT INTO logs(user_id, action, result) VALUES({message.from_user.id}, '–æ–±–Ω—É–ª–µ–Ω–∏–µ {info}', '—É—Å–ø–µ—à–Ω–æ')")
    db.commit()
    await bot.send_message(logs_group, f"ü§® –ó–∞–º–µ—á–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{message.from_user.id}</b>\n–î–µ–π—Å—Ç–≤–∏–µ: <b>–æ–±–Ω—É–ª–µ–Ω–∏–µ {info}</b>\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>—É—Å–ø–µ—à–Ω–æ</b>")
    return await message.reply(f"‚òëÔ∏è –í—ã –æ–±–Ω—É–ª–∏–ª–∏ –¥–æ–º–∞—à–∫—É –ø–æ <b>{lessons_dat[info]}</b>")


@dp.message_handler(commands=['dz_setadmin'])
async def clear_cmd(message: types.Message):
    admin_lvl = c.execute(f"SELECT dostup FROM users WHERE id = {message.from_user.id}").fetchone() 
    if int(admin_lvl[0]) < 3 or admin_lvl[0] is None:
        return await message.reply("‚ùóÔ∏è –£ –≤–∞—Å –º–µ–Ω—å—à–µ 3 —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞!")

    info = message.get_args().split(maxsplit=1)
    if len(info) < 2:
        return await message.reply("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>/dz_setadmin id lvl</b>\n–ü—Ä–∏–º–µ—Ä: <b>/dz_setadmin 1231231234 2</b>")

    data = c.execute(f"SELECT id FROM users WHERE id = {info[0]}").fetchone()
    if data is None:
        return await message.reply("‚ùóÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –±–æ—Ç–∞!")

    try:
        if int(info[1]) > -1 and int(info[1]) <= 3:
            c.execute(f"UPDATE users SET dostup = {info[1]} WHERE id = '{info[0]}'")
            db.commit()
            return await message.reply(f"üòÅ –í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <b>{info[0]}</b> –¥–æ—Å—Ç—É–ø —É—Ä–æ–≤–Ω—è <b>{info[1]}</b>!")
        else:
            return await message.reply("‚ùóÔ∏è –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 0, –Ω–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 3!")
    except ValueError:
        return await message.reply("‚ùóÔ∏è –í –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∫–æ–º–∞–Ω–¥—ã –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—ã!")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)